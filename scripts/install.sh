#!/usr/bin/env bash
set -euo pipefail

# -----------------------------------------------------------------------------
# install_user_service.sh
#   - Parses flags: --vivado-path, --yosys-root, --nice, --restart-sec
#   - Builds fuznet
#   - Installs Yosys if missing
#   - Writes .env at project root
#   - Writes systemd --user unit reading from .env
# -----------------------------------------------------------------------------

trap 'echo "‚ùå  Error occurred; aborting installation"' ERR

VIVADO_BIN=${VIVADO_BIN:-$(command -v vivado)}
SERVICE_NICE=${SERVICE_NICE:-10}
SERVICE_RESTART_SEC=${SERVICE_RESTART_SEC:-10}
MAKE_SERVICE=${MAKE_SERVICE:-0}
FUZNET_WORKERS=${FUZNET_WORKERS:-1}

usage(){
  cat<<EOF
Usage: $0 

    [--vivado-path /path/to/vivado]           (required)   
    [--service]                               (default: $MAKE_SERVICE)
    [--nice N]                                (default: $SERVICE_NICE)
    [--restart-sec S]                         (default: $SERVICE_RESTART_SEC)
    [--workers N]                             (default: $FUZNET_WORKERS)
EOF
  exit 1
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --vivado-path)      VIVADO_BIN="$2"; shift 2;;
        --service)          MAKE_SERVICE=1; shift;;
        --nice)             SERVICE_NICE="$2"; shift 2;;
        --restart-sec)      SERVICE_RESTART_SEC="$2"; shift 2;;
        --workers)          FUZNET_WORKERS="$2"; shift 2;;
        *) usage;;
    esac
done

if [[ -z "$VIVADO_BIN" ]]; then
    echo "‚ùå Vivado not found on PATH or --vivado-path not set" >&2
    exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

echo "üîç Checking nix installation‚Ä¶"
if ! command -v nix &> /dev/null; then
    echo "‚ùå Nix is not installed. Please install Nix first." >&2
    exit 1
fi

echo "üî® Building fuznet‚Ä¶"
if ! nix build .#fuznet; then
    echo "‚ùå Build failed. Please check the output for errors." >&2
    exit 1
fi

ENV_FILE="$PROJECT_ROOT/.env"
cat > "$ENV_FILE" <<EOF
# autogenerated by install.sh
VIVADO_BIN="$VIVADO_BIN"
SERVICE_NICE="$SERVICE_NICE"
SERVICE_RESTART_SEC="$SERVICE_RESTART_SEC"
FUZNET_WORKERS="$FUZNET_WORKERS"
EOF
echo "‚úîÔ∏è  Wrote environment to $ENV_FILE"

if [[ $MAKE_SERVICE -eq 0 ]]; then
    echo "‚ö†Ô∏è  Not creating systemd unit; run with --service to create"
    exit 0
fi

SERVICE_DIR="$HOME/.config/systemd/user"
SERVICE_FILE="$SERVICE_DIR/fuznet.service"
mkdir -p "$SERVICE_DIR"
[[ -f "$SERVICE_FILE" ]] && echo "‚ö†Ô∏è  Overwriting $SERVICE_FILE"

cat > "$SERVICE_FILE" <<EOF
[Unit]
Description=Fuznet endless Vivado-fuzz equivalence pool

[Service]
Type=simple
WorkingDirectory=$PROJECT_ROOT

EnvironmentFile=$ENV_FILE

StandardOutput=append:$PROJECT_ROOT/fuznet.log
StandardError=append:$PROJECT_ROOT/fuznet.log

ExecStart=/usr/bin/nix develop "$PROJECT_ROOT"# --command bash -lc './scripts/fuzz_pool.sh'

Restart=always
RestartSec=\${SERVICE_RESTART_SEC}
Nice=\${SERVICE_NICE}

[Install]
WantedBy=default.target
EOF

echo "‚úîÔ∏è  Wrote service unit to $SERVICE_FILE"

echo "‚ü≥ Reloading user systemd‚Ä¶"
systemctl --user daemon-reload
echo "‚éà Enabling fuznet.service‚Ä¶"
systemctl --user enable fuznet.service
echo "‚ñ∂Ô∏è  Starting fuznet.service‚Ä¶"
systemctl --user restart fuznet.service

cat <<EOF

üéâ  Done! Service is running.

- To inspect:   systemctl --user status fuznet.service
- To view logs: journalctl --user -u fuznet.service -f

To stop:       systemctl --user stop    fuznet.service  
To disable:    systemctl --user disable fuznet.service
To uninstall:  rm $SERVICE_FILE  &&  rm $ENV_FILE
EOF